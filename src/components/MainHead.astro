---
import { SITE_DATA } from "@data/siteData";
import "../styles/global.css";

interface Props {
	title?: string | undefined;
	description?: string | undefined;
}

const {
	title = "Your Name: Personal Site",
	description = 'The personal site of "Your Name"',
} = Astro.props;
---

<meta charset="UTF-8" />
<meta name="description" property="og:description" content={description} />
<meta name="viewport" content="width=device-width" />
<meta name="generator" content={Astro.generator} />
<title>{SITE_DATA.seo.siteTitle + " | " + title}</title>

<link
	rel="icon"
	type="image/png"
	href="/favicon/favicon-96x96.png"
	sizes="96x96"
/>
<link rel="icon" type="image/svg+xml" href="/favicon/favicon.svg" />
<link rel="shortcut icon" href="/favicon/favicon.ico" />
<link
	rel="apple-touch-icon"
	sizes="180x180"
	href="/favicon/apple-touch-icon.png"
/>
<link rel="manifest" href="/favicon/site.webmanifest" />

<link rel="sitemap" href="/sitemap-index.xml" />

<style is:inline>
	@font-face {
		font-family: "Montserrat";
		src:
			url("/fonts/Montserrat-VariableFont_wght.woff2") format("woff2"),
			url("/fonts/Montserrat-VariableFont_wght.ttf") format("truetype");
		font-display: swap;
		font-weight: 100 900;
		font-style: normal;
	}

	html,
	body {
		font-family: "Montserrat", sans-serif;
	}
	:root {
		--font-system: system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI",
			Roboto, Oxygen, Ubuntu, Cantarell, "Open Sans", "Helvetica Neue",
			sans-serif;
		--font-body: "Montserrat", var(--font-system);
		--font-brand: "Montserrat", var(--font-system);
	}
</style>

<script is:inline>
	// This code is inlined in the head to make dark mode instant & blocking.
	const getThemePreference = () => {
		if (
			typeof localStorage !== "undefined" &&
			localStorage.getItem("theme")
		) {
			return localStorage.getItem("theme");
		}
		return window.matchMedia("(prefers-color-scheme: dark)").matches
			? "dark"
			: "light";
	};
	const isDark = getThemePreference() === "dark";
	document.documentElement.classList[isDark ? "add" : "remove"]("theme-dark");

	if (typeof localStorage !== "undefined") {
		// Watch the document element and persist user preference when it changes.
		const observer = new MutationObserver(() => {
			const isDark =
				document.documentElement.classList.contains("theme-dark");
			localStorage.setItem("theme", isDark ? "dark" : "light");
		});
		observer.observe(document.documentElement, {
			attributes: true,
			attributeFilter: ["class"],
		});
	}
</script>
